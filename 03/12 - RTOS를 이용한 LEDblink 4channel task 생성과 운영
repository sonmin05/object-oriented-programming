#include <Arduino.h>
#include <Arduino_FreeRTOS.h>
#include <semphr.h>

// 상수 정의
#define NUM_ADC_CHANNELS 4

// LED blink를 위한 데이터를 위한 구조체
typedef struct {
  int output_pin;          // output pin 번호
  uint32_t samplingInterval; // 샘플링 간격 (ms)
} LEDBlinkData_t;

// 각 채널별 LED 설정 데이터
LEDBlinkData_t blinkPinData[NUM_ADC_CHANNELS] = {
  {5, 100}, // 채널 0: 100ms 간격
  {6, 200}, // 채널 1: 200ms 간격
  {7, 300}, // 채널 2: 300ms 간격
  {8, 400}  // 채널 3: 400ms 간격
};

// 뮤텍스 핸들
SemaphoreHandle_t adcMutex;

// 스택 오버플로우 후크 함수
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
  Serial.print(F("스택 오버플로우 발생: "));
  Serial.println(pcTaskName);
  while (1); // 멈춤
}

// 각 채널별 LED 점멸 태스크
void TaskBlink(void *pvParameters) {
  // 매개변수에서 LED 데이터 구조체 가져오기
  LEDBlinkData_t *pLEDData = (LEDBlinkData_t *)pvParameters;
  
  // LED 핀 초기화
  pinMode(pLEDData->output_pin, OUTPUT);
  
  // LED 상태 변수
  bool ledState = false;
  
  // 무한 루프로 작업 실행
  for (;;) {
    // 뮤텍스 획득 시도
    if (xSemaphoreTake(adcMutex, (TickType_t)10) == pdTRUE) {
      // LED 상태 토글
      ledState = !ledState;
      digitalWrite(pLEDData->output_pin, ledState);

      // 디버깅을 위한 출력
      Serial.print(F("채널 "));
      Serial.print((pLEDData->output_pin) - 5);
      Serial.print(F(": LED "));
      Serial.println(ledState ? F("켜짐") : F("꺼짐"));

      // 뮤텍스 해제
      xSemaphoreGive(adcMutex);
    } else {
      Serial.println(F("뮤텍스 획득 실패"));
    }

    // 설정된 간격만큼 대기
    vTaskDelay(pdMS_TO_TICKS(pLEDData->samplingInterval));
  }
}

void setup() {
  // 시리얼 통신 초기화
  Serial.begin(115200);
  while (!Serial) {
    ; // 시리얼 포트 연결 대기
  }
  
  Serial.println(F("Arduino RTOS 4채널 LED 점멸 시작"));
  
  // 뮤텍스 생성
  adcMutex = xSemaphoreCreateMutex();
  
  if (adcMutex == NULL) {
    Serial.println(F("뮤텍스 생성 실패"));
    while (1); // 오류 시 정지
  }
  
  // Blink 변환 태스크 생성 (각 채널별로)
  for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
    char taskName[12];
    sprintf(taskName, "Blink_Ch%d", i);
    
    if (xTaskCreate(
      TaskBlink,              // 태스크 함수
      taskName,               // 태스크 이름
      256,                    // 스택 크기 (늘림)
      (void*)&blinkPinData[i], // 파라미터
      1,                      // 우선순위
      NULL                    // 태스크 핸들
    ) == pdPASS) {
      Serial.print(F("태스크 생성: "));
      Serial.print(taskName);
      Serial.print(F(", 핀: "));
      Serial.print(blinkPinData[i].output_pin);
      Serial.print(F(", 간격: "));
      Serial.print(blinkPinData[i].samplingInterval);
      Serial.println(F("ms"));
    } else {
      Serial.print(F("태스크 생성 실패: "));
      Serial.println(taskName);
    }
  }

  Serial.println(F("스케줄러 시작"));
  vTaskStartScheduler();
  Serial.println(F("스케줄러 시작 실패"));  // 이 메시지가 보이면 메모리 문제
}

void loop() {
  // FreeRTOS가 태스크를 처리하므로 loop()는 실행되지 않음
}
